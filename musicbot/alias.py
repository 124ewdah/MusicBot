import os
import sys
import shutil
import logging
import configparser

from collections import defaultdict

from .exceptions import HelpfulError

log = logging.getLogger(__name__)


class Alias:
    # noinspection PyUnresolvedReferences
    def __init__(self, alias_file):
        self.alias_file = alias_file
        self.find_alias_file()
        self.aliases = defaultdict(list)

        config = configparser.ConfigParser(interpolation=None)
        config.read(alias_file, encoding='utf-8')

        confsections = {"Aliases"}.difference(config.sections())
        if confsections:
            raise HelpfulError(
                "One or more required alias config sections are missing.",
                "Fix your alias config.  Each [Section] should be on its own line with "
                "nothing else on it.  The following sections are missing: {}".format(
                    ', '.join(['[%s]' % s for s in confsections])
                ),
                preface="An error has occured parsing the alias config:\n"
            )

        for key in config['Aliases']:
            self.aliases[key] = config['Aliases'][key].split()

    def find_alias_file(self):
        config = configparser.ConfigParser(interpolation=None)

        if not os.path.isfile(self.alias_file):
            if os.path.isfile(self.alias_file + '.ini'):
                shutil.move(self.alias_file + '.ini', self.alias_file)
                log.info("Moving {0} to {1}, you should probably turn file extensions on.".format(
                    self.alias_file + '.ini', self.alias_file
                ))

            elif os.path.isfile('config/example_alias.ini'):
                shutil.copy('config/example_alias.ini', self.alias_file)
                log.warning('Aliases file not found, copying example_alias.ini')

            else:
                raise HelpfulError(
                    "Your alias config files are missing. Neither alias.ini nor example_alias.ini were found.",
                    "Grab the files back from the archive or remake them yourself and copy paste the content "
                    "from the repo. Stop removing important files!"
                )

        if not config.read(self.alias_file, encoding='utf-8'):
            c = configparser.ConfigParser()
            try:
                # load the config again and check to see if the user edited that one
                c.read(self.alias_file, encoding='utf-8')

            except Exception as e:
                print(flush=True)
                log.critical("Unable to copy config/example_alias.ini to {}".format(self.alias_file), exc_info=e)
                sys.exit(2)

    def write_alias(self, location = None):
        
        if not location:
            location = self.alias_file

        config = configparser.ConfigParser(interpolation=None, allow_no_value=True)
        config.set(configparser.DEFAULTSECT, '# This is the alias file for adding aliases to commands in the MusicBot.')
        config.set(configparser.DEFAULTSECT, '# Do not edit this file using Notepad as it ruins the formatting - use')
        config.set(configparser.DEFAULTSECT, '# Notepad++ or a code editor like Visual Studio Code.')
        config.add_section('Aliases')
        for key, value in self.aliases.items():
            config.set('Aliases', key, ' '.join(value))
        with open(location, 'w') as f:
            config.write(f)
            
class AliasDefaults:
    alias_file = 'config/alias.ini' 